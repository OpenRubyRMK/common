=Commands and responses

This file describes the (XML) commands that can be send to an OpenRubyRMK
server and how Karfunkel, the server, responds to them. As a general convention
throughout this file, I use the hash sign # to denote comments. These are *not*
valid XML, so do not use them inside your requests. If you want to embed a
comment into your request (for whatever reason), use the normal XML comment
syntax <tt><!-- YOUR_COMMENT_HERE --></tt>.

Please also note that Karfunkel acts case-sensitive, i.e. a "HELLO" request is
not the same as a "Hello" request, Karfunkel will only accept the latter one.
For use in text the uppercase variant to distinguish it from a normal words is
not a problem, but if possible you should use teletyped notation for that
purpose, i.e. +Hello+.

==Vocabulary

[Karfunkel] OpenRubyRMK's server.
[Command]   The whole bunch of XML sent and received to, by and from Karfunkel
            at one time.
[Request]   The part of a command that indicates what you want Karfunkel to do.
[Response]  Karfunkel's opinion and reports about your requests. This is also
            part of a command.
[Notification] Purely informative message you don't have to respond to. Part of
               a command.

==How to connect

1. First, you need to have a connection to Karfunkel, which shouldn't be that
   hard to get, just connect to the port where you run Karfunkel (it's port
   3141 by default).
2. When this is done, Karfunkel waits for your application to greet him and
   wonâ€™t respond until you did (he's quite perticular about this). Send him the
   <tt>Hello</tt> command (described below) and wait. If you don't greet him
   within a few seconds, he'll just cut your connection and go away.
3. If Karfunkel hadn't had a bad day, he will notice your efforts and respond
   accordingly. Gather the important things from the response and you're done.
4. Send whatever command you want.

==Basic structure of a command

===Requests

This is the basic structure of a request you send to Karfunkel (exception is
the +Hello+ request which misses the <sender> tag at the toplevel as you don't
have an ID at that moment):

  <?xml version="1.0" encoding="UTF-8"?> #XML definition
  <Karfunkel> #This is the root. It's ALWAYS <Karfunkel>. Capitalized.
    
    # The SENDER block contains information on the one who sent the request.
    # Answers have to go to the client with the ID specified here.
    <sender>
      <id>6</id> #This is the ID you get from Karfunkel via a HELLO request.
    </sender>
    
    # The request type you send. One of the various ones described in this file.
    # The ID is an index you are expected to increment (or vary in another 
    # unique algorithm) for each request; answers to requests get the same 
    # IDs as their respective requests. NEVER use an ID more than once. 
    <request type="OpenProject" id="12">
      # The request's body differs from request to request. Look into
      # each request's documentation in order to find out what goes here.
      # Generally, any "parameters", as one would call it in OO programming,
      # go here.
    </request>
    
    # You may put any number of requests here and Karfunkel will handle them
    # one-by-one, sending a response for each request in any order. So use
    # your request ID to distinguish which request caused which response.
  </Karfunkel>

===Responses

Whenever you send a request to Karfunkel, he responds in some way. His responses
always have the following structure:

  <?xml version="1.0" encoding="UTF-8"?>
  <Karfunkel> #As always. This is the root.
    <sender>
      <id>0</id> #0 is Karfunkel's own ID
    </sender>
    
    # A response to a request. The type is the same as your request's, and the
    # ID as well. Furthermore a status tag allows you to check how Karfunkel
    # proceeded with your request; you can find a list of possible stati below.
    <response type="OpenProject" id="12" status="finished"> 
      # A response's body differs from response to response. Look into each
      # response's documentation in order to find out what goes here.
    </response>
    
  </Karfunkel>

These are the possible stati your request can get assigned:

[ok]         Generic response for requests that don't need much processing,
             notably informational ones.
[finished]   Your request has been executed and finished sucessfully.
[failed]     For whatever reason, Karfunkel was willing, but not able to
             process your request.
[processing] The request is being processed at the moment. Stay tuned, you may
             get a +finished+ response soon!
[rejected]   No good. Whatever you wanted Karfunkel to do, he won't do it.
             Normally he's smart enough to tell you why he didn't like your
             request.

Especially in the case of long-running operations, a request can cause multiple
responses from Karfunkel. For example, opening a project causes Karfunkel to
immediately send a +processing+ response with the ID of your request. After
some time, when the project has fully been loaded, he will contact you again,
sending you the +finished+ response with the same ID as the previous
+processing+ response (which is in turn the same ID you assigned to your
request).

There's one special response that you can get: The +error+ response. This is
sent by Karfunkel if he didn't unterstand anything of what you said, i.e. your
command contained massive syntactical errors or the like. As Karfunkel wasn't
able to detect command type and ID, he puts +unknown+ for the command type and
-1 for the ID. If you send proper commands over a proper network connection,
you shouldn't get this response.

===Notifications

Sometimes you'll find Karfunkel sending you some data without requesting it.
These are usually so-called _notifications_, and are delivered when something
in the server's state changes that affects all clients, e.g. a project file
was opened or some data on a map was changed. Notifications have the
following structure:

  <?xml version="1.0" encoding="UTF-8"?>
  <Karfunkel> #As always
    
    <sender>
      <id>0</id> #0 is Karfunkel's own ID
    </sender>
    
    <notification type="field_set"> #The type tells you what info you'll find...
      #...in this block here. It's different from notification to notification.
    </notification>
    
  </Karfunkel>

Karfunkel expects no answer to a notification, they're purely informative
(but you probably should reflect them in your interface, e.g. change a
map's name if it has been renamed by another client). The existing notification 
types can be found further down in this file. 

==Requests that can be sent

Following is a list of requests that can be sent to Karfunkel after the
connection has been established (except of the +Hello+ request, which
establishes the connection). The documentation has the following form: 

  Description of the request. 
  
  PARAMETERS
  [parameter1] Parameter 1's description...
  [parameter2] Parameter 2's description...
  .
  .
  .
  
  POSSIBLE RESPONSES
  
  [response_status] (optionally short discussion of meaning.)
    [tag1] Tag 1's description...
    [tag2] Tag 2's description...
    .
    .
    .
  [response_status2] (optionally short discussion of meaining)
    [tag1] Tag 1's description...
    .
    .
    .

The definition lists (those with brackets [ and ]) are meant to abstract the 
XML structure (to save some typing ;-)). I.e., the following definition list: 
  
  POSSIBLE RESPONSES
  [ok]
    [par1] Parameter 1.
    [par2] Parameter 2.

Translates into this XML: 

  <?xml version="1.0" encoding="UTF-8"?>
  <Karfunkel>
    <response type="whatever" id="XX" status="ok">
      <par1>Content of Parameter 1.</par1>
      <par2>Content of Parameter 2.</par2>
    </response>
  </Karfunkel

Please also note that nearly each of this requests may receive a +rejected+ 
response, depending on how the server administrator configured Karfunkel. For
simplicity's sake I don't list the +rejected+ response.

===Eval

The +Eval+ request is for debugging purposes. It causes Karfunkel to run
arbitrary Ruby code (via +eval+) in the context of the +Eval+ request. It
is *only* available if Karfunkel is running in debug mode; pass the "-d"
command-line parameter if you _really_ want to do this. This creates a
*huge* security hole. As said, this is for *debugging* purposes. If you don't
want to debug Karfunkel <b>do not use</b> this request.

====Parameters

[code] Arbitrary Ruby code, which may span multiple lines. 

====Possible responses

[ok]
  Your request was processed. You get this response even in case of an
  exception. Parameters of successful evaluation:
  
  [result] Result of the code, on which #inspect was called. 
  Parameters of failed evaluation:
  [exception] The exception's class.
  [message]   The exception's message.
  [backtrace] The exception's backtrace, which may span multiple lines.

=== Hello

Establishes a connection. Send this request immediately after you have
connected to Karfunkel. Do not send a <sender> block along with the
command containing this request.

====Parameters

[os] Short string identifying your operating system which Karfunkel wants to 
     know for compatibility reasons. One of +Windows+, +Mac+, +Linux+. 

====Possible responses

[ok]
  [id]             Your client's ID from now on.
  [my_version]     Version number of Karfunkel.
  [my_project]     The project currently loaded. May be empty.
  [my_clients_num] The number of clients including you.

=== OpenProject

Makes Karfunkel load a given project file. The project is not selected, that's
a separate +SelectProject+ request. The path is understand as a path on the
system Karfunkel runs on, so you may have to contact the person running the
server to obtain the name of a project file (or just leave it to him/her to 
open a project).

While the project is being loaded, several +load_project+ notifications are
delivered and finally a +loaded_project+ notification is send when the
project has completed loading.

==== Parameters

[file] The project file to load (that one with the .rmk extension). 

==== Possible responses

[processing] This is sent when Karfunkel accepted your request and now
             loads the project.
[finished]   Send when the project is in a usable state.
[failed]     Reason why the project couldn't be loaded. 

=== Ping

This is one of those requests that Karfunkel may send unconditionally to you.
It's used to verify that you are still reachable and if you get one, you
should deliver an answer, otherwise your connection gets cut. Of course you
can send one to Karfunkel (or another client) as well.

==== Parameters

None. 

==== Possible responses

[ok] Tells the requestor that you're available.

=== SelectProject

Instructs Karfunkel to load the project with the given name.

=== Parameters

[name] Name of the project (without the path and .rmk extension) to select. 

==== Possible responses

[ok]     The Project was selected. You can work with it now.
[failed] The project couldn't be selected for some reason.
           [reason] Reason why it failed to be selected. 

== Notifications that can be send

The notification documentation follows the same guidelines as the
request/response documentation, but the paramters/tags are listed directly 
without a further "parameters" heading. 

=== load_project

Karfunkel currently loads a project file. 

[name]              Name of the project being loaded, with the path and 
                    .rmk extension. 
[mapset_extraction] Percent of maps loaded.
[char_extraction]   Percent of characters loaded.

=== loaded_project

Karfunkel finished loading a project file. 

[name] Name of the project loaded. Without the path and .rmk extension.

