=OpenRubyRMK

==What is OpenRubyRMK?

OpenRubyRMK is a program to create 2D games. Mostly it's used to create role play games (RPG for short), but if you do enough effort, you can create anything you'd like to. Furthermore, OpenRubyRMK does not want to restrict you in any way, including modifying and deploying itself. It's free in any sense you can think of: You don't have to pay for it (free as in "free beer") _and_ you're free to modify and redistribute the program (free as in "freedom"). The OpenRubyRMK Team is always looking for new developers and contributors: Feel free to report bugs, submit improvements or just propose new features at http://github.com/Quintus/OpenRubyRMK . If you have any questions or don't want to register at GitHub, feel free (once again) to email us at openrubyrmk@googlemail.com; to this adress everyone of us is subscribed, so it's likely to get an answer from more than one team member. 

==How to use it?

OpenRubyRMK is platform-independent. That means, it runs on Linux systems as well as on Macintosh or Microsoft Windows ones. That's because it is written in Ruby, the most beautiful programming language every invented, have a look at it at http://www.ruby-lang.org . For Windows we supply a full-featured installer, on other systems you have to have a working Ruby 1.9 installation (although nothing prevents you from installing Ruby 1.9 on Windows and using that instead of the installer). 

==Windows

Just start up _bin/OpenRubyRMK.exe_. 

==Other systems

First, make sure you have a working Ruby 1.9 installation. We recommend 1.9.2-p0, although that might change in the future, since we try to be up to date. Additionally, you have to install these gems: +wxruby-ruby19+, +r18n-desktop+. Since the precompiled wxRuby gem causes problems on Ubuntu 9.10 (Karmic) and newer, the OpenRubyRMK Team provides gems specifically compiled for recent Ubuntu versions. We did not make any modifications to wxRuby, if you don't trust us you can use the compile bash script available from our {Download page}[http://github.com/Quintus/OpenRubyRMK/Downloads] as well. 

Second, use that Ruby installation to start _bin/OpenRubyRMK.rb_. 

==Howto write a plugin

(TODO: Write all the help files and put this in there)

Although you can modify OpenRubyRMK's source code if you like, you can extend it by means of a much simpler mechanism: Plugins. OpenRubyRMK supports a code-block based plugin system, so you may add new menu entries or even completely new GUI elements and functionality without the need to modify the maybe complex sources (although we did our best in commenting it). Plugins work as follows: 

1. Every file ending in ".rb" that resides in <i>plugins/</i> or a subdirectory is considered to be a plugin. 
2. At startup time, all plugins are evaluated in a special namespace, OpenRubyRMK::Plugins::Plugs which remembers the code blocks specified. 
3. A plugin mechanism is triggered in OpenRubyRMK's execution, causing all plugins registered to that point to run. For example, every plugin plugged into <tt>:startup</tt> runs immediately after all plugins have been loaded. 

In a plugin file, you first have to choose for which points you want to register your plugin (you can actually have multiple plugins in a single file that register to different points). Here's a list of all possible points you may register to via the #plug_into method: 

[:startup] Run directly after loading all plugins. 
[:mainwindow] Run on creation of the main window. 
[:mapset_window] Run on each creation of the mapset window. 
[:finish] Run shortly before exiting the GUI. 

After that, you should be aware that each plugin is executed in a different context, that is, +self+ points to a different location. Here's where +self+ points to in which plugin point: 

[:startup] OpenRubyRMK::Plugins::Plugs | There's nothing special here. 
[:mainwindow] The mainwindow instance. 
[:mapset_window] A mapset window instance. 
[:finish] OpenRubyRMK::Plugins::Plugs | There's nothing special here. 

If you're interested, outside a call to #plug_into +self+ points to OpenRubyRMK::Plugins::Plugs. This mechanism allows you to access instance variables and methods of special objects you would have to retrieve on a complicated way otherwise. For example, if you want to add a menu to the main window, you just have to know how a wxRuby menu works (OpenRubyRMK's GUI is written in wxRuby) and that @menu_bar holds the reference to the main window's menu bar (look into OpenRubyRMK's API docs to find out which instance variables hold what): 

  #Encoding: UTF-8
  #Register your plugin with the main window
  plug_into :mainwindow do
    #Create a new menu
    menu = Menu.new
    #Get an available ID
    id = THE_APP.id_generator.next
    #Append a menu entry
    menu.append(id, "test")
    #Append your menu to the GUI
    @menu_bar.append(menu, "testmenu")
    
    #Don't forget to register an event handler 
    #with the action you want to happen at click!
    evt_menu(id){|event| puts "test"}
  end

The above code is a complete plugin that adds a new menu "testmenu" containing a single entry "test" to the main window's menu bar. You can find this example in OpenRubyRMK's <i>plugins/</i> directory in the file <i>sample_plugin.rb</i>. Remove the comments to see it in effect. 

One further note on the code: Please write your plugins in UTF-8, since wxRuby expects UTF-8-encoded strings for displaying. You'll get unreadable labels if your strings aren't UTF-8-encoded and contain characters like "ä". Please also note, that if you're writing a plugin you may want it to be auto-translated into other languages as OpenRubyRMK's main GUI is. Now, you can! Inside the GUI-extending plugin blocks, you have access to the auto-translation method #t. #t is your interface to OpenRubyRMK's translation files: With <tt>t.plugins.your_plugin_here</tt> you access the text saved in the translation files as

  plugins:
    your_plugin_here: "Your plugin's text here!"

. If you don't want to widely deploy your plugins, it's enough to add the translations to your locale's translation file, but if you want to publish your plugin, please add an English translation, since OpenRubyRMK first looks into a user locale's translation and, if there's the translation not found, into the English translation file. If it doesn't find a translation there either, the user will be confronted with errors like this: <tt>NoMethodError: Undefined method #to_s for R18n::Untranslated</tt>. And of course, make sure that the name you want to use as a plugin name doesn't exist because a user is likely to have problems if he/she has more than one plugin with the same name installed. 

==License

OpenRubyRMK is a free and open-source RPG creation program. 

Copyright © 2010 OpenRubyRMK Team

This program is free software: you can redistribute it and/or modifyit under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. 

===Contact

You can contact us as via the mail adress openrubyrmk@googlemail.com. 

===Disclaimer of Warranty

THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.
